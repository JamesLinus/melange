package fsm

/**  
 * Composition script for the languages described above.
 */
composition CompleteFSM {
	aggregation(CoreFSM, ImperativeLanguage) 
    aggregation(CoreFSM, ConstraintsLanguage) 
	extension(CoreFSM, JoinPseudostate)    
	extension(CoreFSM, TransitionEffect)  
	extension(CoreFSM, ForkPseudostate)
	extension(CoreFSM, NotTrigger)  
	extension(CoreFSM, AndTrigger)
	extension(CoreFSM, OrTrigger)     
	extension(CoreFSM, Conditional)  
	extension(CoreFSM, ShallowHistory)
	extension(CoreFSM, DeepHistory)  
	extension(CoreFSM, CompositeStates)  
}   

/** 
 * Core FSM. Contains the basic concepts of StateMachine, State, Transition, and Trigger.
 */ 
language CoreFSM { 
	ecore "platform:/resource/fr.inria.diverse.examples.fsm.core/models/fsmcore.ecore"
	exactType CoreFSMMT 
	
	// Variation # 1: Run-To-Completion
	with FSM.rtc.StateMachineAspect 
	with FSM.rtc.RegionAspect 
	with FSM.rtc.StateAspect
	with FSM.rtc.TransitionAspect
	with FSM.rtc.TriggerAspect
	with FSM.rtc.FinalStateAspect
}

/**
 * A simple imperative language for expressing states' actions. 
 */
language ImperativeLanguage {
	ecore "platform:/resource/fr.inria.diverse.examples.simpleimperative/models/simpleimperative.ecore"
	exactType ImperativeLanguageMT
	
	with simple.imperative.aspects.StatementAspect
	with simple.imperative.aspects.ProgramAspect
	with simple.imperative.aspects.ConditionalAspect
	with simple.imperative.aspects.LoopAspect
	with simple.imperative.aspects.VarDeclAspect
	with simple.imperative.aspects.ExpressionAspect
	with simple.imperative.aspects.LiteralAspect
	with simple.imperative.aspects.IntegerLitAspect
	with simple.imperative.aspects.StringLitAspect
	with simple.imperative.aspects.ArithmeticExpressionAspect
}

/**
 * A simple constraints language for expressing transitions' guards and conditions. 
 */
language ConstraintsLanguage{
	ecore "platform:/resource/fr.inria.diverse.examples.simpleconstraints/models/SimpleConstraints.ecore"
	exactType ConstraintsLanguageMT
	
	with simple.constraints.ConstraintAspect
	with simple.constraints.RelationalConstraintAspect
	with simple.constraints.CExpressionAspect
	with simple.constraints.CLiteralAspect
	with simple.constraints.CIntegerAspect
	with simple.constraints.CVarRefAspect
}

/**
 * Composite states: Contains the concept 'CompositeState' that enables hierarchical state machines.
 */
language CompositeStates {
	ecore "platform:/resource/fr.inria.diverse.examples.fsm.compositeStates/models/compositestates.ecore"
	exactType ComposteStatesMT
	
	with FSM.composite.higher.RegionAspect
	with FSM.composite.higher.StateAspect
	
//	with FSM.composite.emptyInitial.RegionAspect
}

/**
 * Transition effect: Contains the concept 'Effect' that enables effects in the transitions
 */
language TransitionEffect {
	ecore "platform:/resource/fr.inria.diverse.examples.fsm.transition.effect/models/TransitionEffect.ecore"
	exactType TransitionEffectMT
	
	// Variation # 1: Sequential	
	with transitioneffects.sequential.TransitionAspect
}

/**
 * Fork pseudostate: Contains the concept 'ForkPseudostate' that enables more complex transitions
 */
language ForkPseudostate {
	ecore "platform:/resource/fr.inria.diverse.examples.fsm.pseudostates.fork/models/Fork.ecore"
	exactType ForkPseudostateMT
	
	with pseudostates.fork.RegionAspect
}

/**
 * Join pseudostate: Contains the concept 'ForkPseudostate' that enables more complex transitions
 */
language JoinPseudostate {
	ecore "platform:/resource/fr.inria.diverse.examples.fsm.pseudostates.join/models/Join.ecore"
	exactType JoinPseudostateMT
	
	with pseudostates.join.RegionAspect
}

/**
 * Not Trigger: Contains the capability for supporting negation on the triggers of the transitions. 
 */
language ShallowHistory {
	ecore "platform:/resource/fr.inria.diverse.examples.fsm.pseudostates.shallowHistory/models/ShallowHistory.ecore"
	exactType ShallowHistoryMT
	
	with pseudostates.shallow.RegionAspect
	with pseudostates.shallow.StateAspect
}

/**
 * Deep History
 */
language DeepHistory {
	ecore "platform:/resource/fr.inria.diverse.examples.fsm.pseudostates.deepHistory/models/DeepHistory.ecore"
	exactType DeepHistoryMT
	
	with pseudostates.deep.RegionAspect
	with pseudostates.deep.StateAspect
}


/**
 * Not Trigger: Contains the capability for supporting negation on the triggers of the transitions. 
 */
language NotTrigger {
	ecore "platform:/resource/fr.inria.diverse.examples.fsm.trigger.not/models/NotTrigger.ecore"
	exactType NotTriggerMT
	
	with trigger.not.NotTriggerAspect
}

/**
 * And Trigger: Contains the capability for supporting disjunction on the triggers of the transitions. 
 */
language AndTrigger {
	ecore "platform:/resource/fr.inria.diverse.examples.fsm.trigger.and/models/AndTrigger.ecore"
	exactType AndTriggerMT

	with trigger.and.AndTriggerAspect
}

/**
 * Or Trigger: Contains the capability for supporting conjuntion on the triggers of the transitions. 
 */
language OrTrigger {
	ecore "platform:/resource/fr.inria.diverse.examples.fsm.trigger.or/models/OrTrigger.ecore"
	exactType OrTriggerMT

	with trigger.or.OrTriggerAspect
}

/**
 * Or Trigger: Contains the capability for supporting conjuntion on the triggers of the transitions. 
 */
language Conditional {
	ecore "platform:/resource/fr.inria.diverse.examples.fsm.pseudostates.conditional/models/Conditional.ecore"
	exactType ConditionalMT

	with pseudostates.conditional.RegionAspect
}