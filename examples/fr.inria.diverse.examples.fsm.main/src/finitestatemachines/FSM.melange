package finitestatemachines

//modeltype IStateMachine{
//	ecore "platform:/resource/fr.inria.diverse.examples.fsm.interfaces/models/ifsm.ecore"
//}

// Implementation 1: State machines that comply to the Run-To-Completion policy: UML and Rhapsody.
metamodel FiniteStateMachineRTC /**implements IStateMachine*/ {
	ecore "platform:/resource/fr.inria.diverse.examples.fsm.metamodel/models/fsm.ecore"
	exactType FiniteStateMachineRTCMT

	with finitestatemachines.rtc.StateMachineAspect
	with finitestatemachines.rtc.StateAspect
} 

//// Implementation 2: State machines that accept simultaneous events: Classical statecharts.
metamodel FiniteStateMachineSimultaneous{
	ecore "platform:/resource/fr.inria.diverse.examples.fsm.metamodel/models/fsm.ecore"
	exactType FiniteStateMachineSimultaneousMT
	
	with finitestatemachines.simultaneous.StateMachineAspect
	with finitestatemachines.simultaneous.StateAspect
}

metamodel FiniteStateMachineTimed {
	ecore "platform:/resource/fr.inria.diverse.example.fsm.metamodel.timed/model/fsm.ecore"
	exactType FiniteStateMachineTimedMT
	
	with finitestatemachines.timed.StateMachineAspect
	with finitestatemachines.timed.StateAspect
	with finitestatemachines.timed.TransitionAspect
}

metamodel FiniteStateMachineComposite{
	ecore "platform:/resource/fr.inria.diverse.example.fsm.metamodel.composite/model/fsm.ecore"
	exactType FiniteStateMachineCompositeMT
	
	with finitestatemachines.composite.StateMachineAspect
	with finitestatemachines.composite.StateAspect
	with finitestatemachines.composite.CompositeStateAspect
}

metamodel FiniteStateMachineTimedComposite{
	ecore "platform:/resource/fr.inria.diverse.example.fsm.metamodel.composite/model/fsm.ecore"
	exactType FiniteStateMachineTimedCompositeMT
	
	with finitestatemachines.timedcomposite.StateMachineAspect
	with finitestatemachines.timedcomposite.StateAspect
	with finitestatemachines.timedcomposite.CompositeStateAspect
	with finitestatemachines.timedcomposite.TransitionAspect
}

metamodel FiniteStateMachineTimedSimultaneous{
	ecore "platform:/resource/fr.inria.diverse.example.fsm.metamodel.timed/model/fsm.ecore"
	exactType FiniteStateMachineTimedSimultaneousMT
	
	with finitestatemachines.timed.simultaneous.StateMachineAspect
	with finitestatemachines.timed.simultaneous.StateAspect
	with finitestatemachines.timed.simultaneous.TransitionAspect
}

metamodel FiniteStateMachineCompositeSimultaneous{
	ecore "platform:/resource/fr.inria.diverse.example.fsm.metamodel.composite/model/fsm.ecore"
	exactType FiniteStateMachineCompositeSimultaneousMT
	
	with finitestatemachines.composite.simultaneous.StateMachineAspect
	with finitestatemachines.composite.simultaneous.StateAspect
	with finitestatemachines.composite.simultaneous.CompositeStateAspect
}

metamodel FiniteStateMachineTimedCompositeSimultaneous{
	ecore "platform:/resource/fr.inria.diverse.example.fsm.metamodel.composite/model/fsm.ecore"
	exactType FiniteStateMachineTimedCompositeSimultaneousMT
	
	with finitestatemachines.timed.composite.simultaneous.StateMachineAspect
	with finitestatemachines.timed.composite.simultaneous.StateAspect
	with finitestatemachines.timed.composite.simultaneous.CompositeStateAspect
	with finitestatemachines.timed.composite.simultaneous.TransitionAspect
}

transformation execute(FiniteStateMachineRTCMT stateMachine, String input, String outputFile){
	val root = stateMachine.contents.head as finitestatemachines.finitestatemachinertcmt.StateMachine
	root.eval(new FSM.interfaces.Context(input), outputFile)
}

// Execution of the state machines.
@Main
transformation main(){
//	val simpleProgram = FiniteStateMachineRTC.load("input/dummie.xmi")
//	execute.call(simpleProgram, "{x;y;z,o;p;q}", "output/dummie-output " + 
//		System.currentTimeMillis + ".pdf")

//	val simpleProgram2 = FiniteStateMachineSimultaneous.load("input/dummie.xmi")
//	execute.call(simpleProgram2, "{x;y;z,o;p;q}", "output/dummie-output " + 
//		System.currentTimeMillis + ".pdf")

	val simpleProgram3 = FiniteStateMachineTimed.load("input/dummie.xmi")
	execute.call(simpleProgram3, "{x;y;z,o;p;q}", "output/dummie-output " + 
		System.currentTimeMillis + ".pdf")
}
