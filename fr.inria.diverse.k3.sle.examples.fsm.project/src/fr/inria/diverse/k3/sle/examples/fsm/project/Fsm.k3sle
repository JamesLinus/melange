package fr.inria.diverse.k3.sle.examples.fsm.project

import fr.inria.diverse.k3.sle.examples.fsm.project.executablefsmmt.FSM

import static extension fr.inria.diverse.k3.sle.lib.MetamodelExtensions.*

modeltype MinimalFsmMT {
	ecore "platform:/resource/fr.inria.diverse.k3.sle.examples.metamodels.simplefsm/model/SimpleFSM.ecore"
}

metamodel SimpleFsm implements MinimalFsmMT {
	ecore "platform:/resource/fr.inria.diverse.k3.sle.examples.metamodels.simplefsm/model/SimpleFSM.ecore"
	exactType SimpleFsmMT
}

metamodel MultipleFinals inherits SimpleFsm {
	exactType MultipleFinalsMT
}

metamodel CompositeFsm {
	ecore "platform:/resource/fr.inria.diverse.k3.sle.examples.metamodels.compositefsm/model/CompositeFSM.ecore"
	exactType CompositeFsmMT
}

metamodel ExecutableFsm {
	ecore "platform:/resource/fr.inria.diverse.k3.sle.examples.metamodels.fsm/model/FSM.ecore"
	exactType ExecutableFsmMT
	aspect fr.inria.diverse.k3.sle.examples.fsm.project.ExecutableFsmAspect
}

metamodel TimedFsm {
	ecore "platform:/resource/fr.inria.diverse.k3.sle.examples.metamodels.timedfsm/model/TimedFSM.ecore"
	exactType TimedFsmMT
	aspect fr.inria.diverse.k3.sle.examples.fsm.project.TimedFsmAspect
}

transformation execute(ExecutableFsmMT fsm) {
	val root = fsm.contents.head as FSM

	print("Output: ")
	root.execute("adcdce")
	println
}

@Main
transformation main() {
	val m1 = ExecutableFsm.load("input/Simple.fsm",      ExecutableFsmMT)
	val m2 =      TimedFsm.load("input/Simple.timedfsm", ExecutableFsmMT)
	
	execute.call(m1)
	execute.call(m2)
}
